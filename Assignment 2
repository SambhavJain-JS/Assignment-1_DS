#include <iostream>
#include <cmath>
using namespace std;

struct Node {
    int data;
    Node* left;
    Node* right;
};

// Function to create a tree
Node* CreateTree() 
{
    int val;
    cin >> val;

    if (val == -1) 
    {
        return NULL; 
    } 
    else 
    {
        Node* CreateNode = new Node();
        CreateNode->data = val;

        cout << "Left Node of " << val << ": ";
        CreateNode->left = CreateTree(); // Recursively create the left subtree

        cout << "Right Node of " << val << ": ";
        CreateNode->right = CreateTree(); // Recursively create the right subtree

        return CreateNode;
    }
}

// Function to print post-order traversal
void printPostOrder(Node* root) 
{
    if (root == NULL) return;

    // Visit left subtree
    printPostOrder(root->left);
    // Visit right subtree
    printPostOrder(root->right);
    // Visit root
    cout << root->data << " ";
}

// Function to check if two trees are magical
bool IsMagical(Node* root1, Node* root2) 
{
    // Both are null, considered magical
    if (root1 == NULL && root2 == NULL) 
    {
        return true; 
    }
    // One tree is null and the other is not, means trees are not magical
    if (root1 == NULL || root2 == NULL) 
    {
        return false; 
    }

    // If both nodes are leaves, skip sum and difference calculation
    if (root1->left == NULL && root1->right == NULL && root2->left == NULL && root2->right == NULL) 
    {
        return IsMagical(root1->left, root2->left) && IsMagical(root1->right, root2->right);
    }

    // Calculate sum and difference for root1 (internal node)
    int sum1 = 0, diff1 = 0;
    if (root1->left) 
    {
        sum1 += root1->left->data;
        diff1 += root1->left->data;
    }
    if (root1->right) 
    {
        sum1 += root1->right->data;
        diff1 -= root1->right->data;
    }

    // Calculate sum and difference for root2 (internal node)
    int sum2 = 0, diff2 = 0;
    if (root2->left) 
    {
        sum2 += root2->left->data;
        diff2 += root2->left->data;
    }
    if (root2->right)
    {
        sum2 += root2->right->data;
        diff2 -= root2->right->data;
    }

    // Modify diff calculation
    diff1 = abs(root1->data - abs(diff1));
    diff2 = abs(root2->data - abs(diff2));

    // Debugging: Print sums and diffs for both trees
    cout << "Root1: " << root1->data << " | Sum1 (of child): " << sum1 << " | Diff1 (of child): " << diff1 << endl;
    cout << "Root2: " << root2->data << " | Sum2 (of child): " << sum2 << " | Diff2 (of child): " << diff2 << endl;

    // Check if the sums and diffs are equal
    if (sum1 != sum2 || diff1 != diff2) 
    {
        return false; 
    }

    // Recursively check the left and right subtrees
    return IsMagical(root1->left, root2->left) && IsMagical(root1->right, root2->right);
}


int main() 
{
    cout << "Create Tree 1 (Use -1 for null nodes):" << endl;
    cout<<"Enter Main Root: ";
    Node* root1 = CreateTree();

    cout << "Create Tree 2 (Use -1 for null nodes):" << endl;
    cout<<"Enter Main Root: ";

    Node* root2 = CreateTree();

    cout <<endl<< "Post-order traversal of Tree 1: ";
    printPostOrder(root1);

    cout <<endl<< "Post-order traversal of Tree 2: ";
    printPostOrder(root2);

    cout << endl;

    if (IsMagical(root1, root2))
    {
        cout << "The trees are magical." << endl;
    } 
    else 
    {
        cout << "The trees are not magical." << endl;
    }

    return 0;
}
